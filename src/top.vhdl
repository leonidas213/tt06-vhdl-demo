-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

entity COMP_GATE_UNSIGNED is
  generic (Bits : integer);
  port (
    gr : out std_logic;
    eq : out std_logic;
    le : out std_logic;
    a  : in  std_logic_vector((Bits - 1) downto 0);
    b  : in  std_logic_vector((Bits - 1) downto 0));
end entity;

architecture Behavioral of COMP_GATE_UNSIGNED is
begin
  process (a, b)
  begin
    if (unsigned(a) > unsigned(b)) then
      le <= '0';
      eq <= '0';
      gr <= '1';
    elsif (unsigned(a) < unsigned(b)) then
      le <= '1';
      eq <= '0';
      gr <= '0';
    else
      le <= '0';
      eq <= '1';
      gr <= '0';
    end if;
  end process;
end architecture;

library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

entity DIG_RAMDualPort is
  generic (
    Bits     : integer;
    AddrBits : integer);
  port (
    D   : out std_logic_vector((Bits - 1) downto 0);
    A   : in  std_logic_vector((AddrBits - 1) downto 0);
    Din : in  std_logic_vector((Bits - 1) downto 0);
    str : in  std_logic;
    C   : in  std_logic;
    ld  : in  std_logic);
end entity;

architecture Behavioral of DIG_RAMDualPort is
  -- CAUTION: uses distributed RAM
  type memoryType is array (0 to (2 ** AddrBits) - 1) of STD_LOGIC_VECTOR((Bits - 1) downto 0);
  signal memory : memoryType;
begin
  process (C)
  begin
    if rising_edge(C) and (str = '1') then
      memory(to_integer(unsigned(A))) <= Din;
    end if;
  end process;
  D <= memory(to_integer(unsigned(A))) when ld = '1' else (others => 'Z');
end architecture;

library ieee;
  use ieee.std_logic_1164.all;

entity DIG_Register_BUS is
  generic (Bits : integer);
  port (
    Q  : out std_logic_vector((Bits - 1) downto 0);
    D  : in  std_logic_vector((Bits - 1) downto 0);
    C  : in  std_logic;
    en : in  std_logic);
end entity;

architecture Behavioral of DIG_Register_BUS is
  signal state : std_logic_vector((Bits - 1) downto 0) := (others => '0');
begin
  Q <= state;

  process (C)
  begin
    if rising_edge(C) and (en = '1') then
      state <= D;
    end if;
  end process;
end architecture;

library ieee;
  use ieee.std_logic_1164.all;

entity MUX_GATE_BUS_1 is
  generic (Bits : integer);
  port (
    p_out : out std_logic_vector((Bits - 1) downto 0);
    sel   : in  std_logic;

    in_0  : in  std_logic_vector((Bits - 1) downto 0);
    in_1  : in  std_logic_vector((Bits - 1) downto 0));
end entity;

architecture Behavioral of MUX_GATE_BUS_1 is
begin
  with sel select
    p_out <=                       in_0 when '0',
                                   in_1 when '1',
                   (others => '0') when others;
end architecture;

library ieee;
  use ieee.std_logic_1164.all;

entity DIG_D_FF_AS is

  port (
    Q    : out std_logic;
    notQ : out std_logic;
    Set  : in  std_logic;
    D    : in  std_logic;
    C    : in  std_logic;
    Clr  : in  std_logic);
end entity;

architecture Behavioral of DIG_D_FF_AS is
  signal state : std_logic := '0';
begin
  process (Set, Clr, C)
  begin
    if (Set = '1') then
      state <= not ('0');
    elsif (Clr = '1') then
      state <= '0';
    elsif rising_edge(C) then
      state <= D;
    end if;
  end process;

  Q    <= state;
  notQ <= not (state);
end architecture;

library ieee;
  use ieee.std_logic_1164.all;

entity DIG_JK_FF is
  generic (tempval : std_logic);
  port (
    Q    : out std_logic;
    notQ : out std_logic;
    J    : in  std_logic;
    C    : in  std_logic;
    K    : in  std_logic);
end entity;

architecture Behavioral of DIG_JK_FF is
  signal temp : std_logic := tempval;
begin
  process (C)
  begin
    if rising_edge(C) then
      if (J = '0' and K = '1') then
        temp <= '0';
      elsif (J = '1' and K = '0') then
        temp <= '1';
      elsif (J = '1' and K = '1') then
        temp <= not (temp);
      end if;
    end if;
  end process;
  Q    <= temp;
  notQ <= not (temp);
end architecture;

library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

entity tt_um_smallcpu is
  port (
    clk     : in  std_logic;
    rst_n   : in  std_logic;
    ena     : in  std_logic;
    uio_in  : in  std_logic_vector(7 downto 0);
    ui_in   : in  std_logic_vector(7 downto 0);
    uo_out  : out std_logic_vector(7 downto 0);
    uio_out : out std_logic_vector(7 downto 0);
    uio_oe  : out std_logic_vector(7 downto 0));
end entity;

architecture Behavioral of tt_um_smallcpu is
  signal s0                    : std_logic_vector(6 downto 0);
  signal s1                    : std_logic_vector(15 downto 0);
  signal st                    : std_logic;
  signal ld                    : std_logic;
  signal s2                    : std_logic_vector(15 downto 0);
  signal s3                    : std_logic;
  signal ioW                   : std_logic;
  signal s4                    : std_logic;
  signal s5                    : std_logic_vector(3 downto 0);
  signal outputToOutside       : std_logic_vector(3 downto 0);
  signal s6                    : std_logic;
  signal s7                    : std_logic;
  signal s8                    : std_logic;
  signal s9                    : std_logic;
  signal s10                   : std_logic;
  signal s11                   : std_logic;
  signal s12                   : std_logic;
  signal s13                   : std_logic;
  signal Din                   : std_logic_vector(15 downto 0);
  signal s14                   : std_logic_vector(7 downto 0);
  signal s15                   : std_logic_vector(7 downto 0);
  signal s16                   : std_logic;
  signal inter                 : std_logic;
  signal s17                   : std_logic_vector(7 downto 0);
  signal s18                   : std_logic;
  signal s19                   : std_logic;
  signal InterLock             : std_logic;
  signal s20                   : std_logic;
  signal s21                   : std_logic;
  signal s22                   : std_logic;
  signal s23                   : std_logic;
  signal s24                   : std_logic;
  signal s25                   : std_logic_vector(15 downto 0);
  signal s26                   : std_logic_vector(15 downto 0);
  signal s27                   : std_logic;
  signal s28                   : std_logic;
  signal s29                   : std_logic;
  signal s30                   : std_logic;
  signal s31                   : std_logic;
  signal s32                   : std_logic;
  signal s33                   : std_logic;
  signal s34                   : std_logic;
  signal s35                   : std_logic;
  signal s36                   : std_logic;
  signal s37                   : std_logic;
  signal s38                   : std_logic;
  signal s39                   : std_logic;
  signal s40                   : std_logic;
  signal s41                   : std_logic;
  signal s42                   : std_logic;
  signal s43                   : std_logic;
  signal s44                   : std_logic;
  signal s45                   : std_logic;
  signal s46                   : std_logic;
  signal s47                   : std_logic;
  signal s48                   : std_logic;
  signal s49                   : std_logic;
  signal s50                   : std_logic;
  signal s51                   : std_logic;
  signal s52                   : std_logic;
  signal s53                   : std_logic;
  signal s54                   : std_logic;
  signal s55                   : std_logic;
  signal s56                   : std_logic;
  signal s57                   : std_logic;
  signal s58                   : std_logic;
  signal s59                   : std_logic;
  signal s60                   : std_logic;
  signal RandomNUM             : std_logic_vector(15 downto 0);
  signal s61                   : std_logic;
  signal s62                   : std_logic;
  signal s63                   : std_logic_vector(3 downto 0);
  signal outputToOutsideEnable : std_logic_vector(3 downto 0);
  signal s64                   : std_logic;
  signal s65                   : std_logic_vector(3 downto 0);
  signal s66                   : std_logic_vector(3 downto 0);
  signal s67                   : std_logic_vector(3 downto 0);
  signal s68                   : std_logic_vector(3 downto 0);
begin
                s16             <= not clk;
                s1(7 downto 0)  <= ui_in;
                s1(15 downto 8) <= uio_in;
                s6              <= uio_in(0);
                s7              <= uio_in(1);
                s8              <= uio_in(2);
                s9              <= uio_in(3);
                s10             <= uio_in(4);
                s11             <= uio_in(5);
                s12             <= uio_in(6);
                s13             <= uio_in(7);
                InterLock       <= ui_in(0);
                s64             <= ui_in(1);
  gate0: entity work.COMP_GATE_UNSIGNED
    generic map (
      Bits => 16)
    port map (
      a  => s1,
      b  => "0000000000000101",
      eq => s3);
                Din(0)  <= s6;
                Din(1)  <= s7;
                Din(2)  <= s8;
                Din(3)  <= s9;
                Din(4)  <= s10;
                Din(5)  <= s11;
                Din(6)  <= s12;
                Din(7)  <= s13;
                Din(8)  <= '0';
                Din(9)  <= '0';
                Din(10) <= '0';
                Din(11) <= '0';
                Din(12) <= '0';
                Din(13) <= '0';
                Din(14) <= '0';
                Din(15) <= '0';
                s14(0)  <= s6;
                s14(1)  <= s7;
                s14(2)  <= s8;
                s14(3)  <= s9;
                s14(4)  <= s10;
                s14(5)  <= s11;
                s14(6)  <= s12;
                s14(7)  <= s13;
  gate1: entity work.COMP_GATE_UNSIGNED
    generic map (
      Bits => 16)
    port map (
      a  => s1,
      b  => "0000000000001000",
      eq => s27);
  gate2: entity work.COMP_GATE_UNSIGNED
    generic map (
      Bits => 16)
    port map (
      a  => s1,
      b  => "0000000000000110",
      eq => s61);
                s0  <= s1(6 downto 0);
                s5  <= s1(3 downto 0);
                s63 <= s1(3 downto 0);
  gate3: entity work.DIG_RAMDualPort -- mem
  generic map (
    Bits     => 16,
    AddrBits => 7) port map (
    A   => s0,
    Din => s1,
    str => st,
    C   => clk,
    ld  => ld,
    D   => s2);
                s4 <= (s3 and ioW);
  gate4: entity work.DIG_Register_BUS
    generic map (
      Bits => 4)
    port map (
      D  => s5,
      C  => clk,
      en => s4,
      Q  => outputToOutside);
  gate5: entity work.DIG_Register_BUS
    generic map (
      Bits => 8)
    port map (
      D  => s15,
      C  => s16,
      en => inter,
      Q  => s17);
  gate6: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 8)
    port map (
      sel   => InterLock,
      in_0  => s14,
      in_1  => s17,
      p_out => s15);
  gate7: entity work.DIG_Register_BUS -- seed
  generic map (
    Bits => 16) port map (
    D  => s1,
    C  => clk,
    en => s24,
    Q  => s25);
                s24 <= (s27 and ioW);
                s62 <= (s61 and ioW);
  gate8: entity work.DIG_Register_BUS
    generic map (
      Bits => 4)
    port map (
      D  => s63,
      C  => clk,
      en => s62,
      Q  => outputToOutsideEnable);
  gate9: entity work.COMP_GATE_UNSIGNED
    generic map (
      Bits => 8)
    port map (
      a  => s15,
      b  => s17,
      gr => s18,
      le => s19);
  gate10: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 16)
    port map (
      sel   => s24,
      in_0  => "0000000000000000",
      in_1  => s25,
      p_out => s26);
                 s21                 <= (clk and s24);
                 uio_out(3 downto 0) <= s2(3 downto 0);
                 uio_out(7 downto 4) <= outputToOutside;
                 uio_oe(3 downto 0)  <= s2(7 downto 4);
                 uio_oe(7 downto 4)  <= outputToOutsideEnable;
                 s65                 <= s2(11 downto 8);
                 s66                 <= s2(15 downto 12);
                 inter               <= (s18 or s19);
  gate11: entity work.DIG_Register_BUS
    generic map (
      Bits => 4)
    port map (
      D  => s66,
      C  => clk,
      en => '1',
      Q  => s67);
  gate12: entity work.DIG_Register_BUS
    generic map (
      Bits => 4)
    port map (
      D  => s65,
      C  => clk,
      en => '1',
      Q  => s68);
                 s30 <= s26(0);
                 s33 <= s26(1);
                 s35 <= s26(2);
                 s37 <= s26(3);
                 s39 <= s26(4);
                 s41 <= s26(5);
                 s43 <= s26(6);
                 s45 <= s26(7);
                 s47 <= s26(8);
                 s49 <= s26(9);
                 s51 <= s26(10);
                 s53 <= s26(11);
                 s55 <= s26(12);
                 s57 <= s26(13);
                 s58 <= s26(14);
                 s60 <= s26(15);
  gate13: entity work.COMP_GATE_UNSIGNED
    generic map (
      Bits => 4)
    port map (
      a  => s67,
      b  => s68,
      eq => ioW);
  gate14: entity work.DIG_D_FF_AS
    port map (
      Set  => '0',
      D    => s20,
      C    => s21,
      Clr  => s22,
      Q    => s23,
      notQ => s20);
                 s29 <= (s24 and not s28);
  gate15: entity work.DIG_D_FF_AS
      port map (
      Set => s30,
      D   => s31,
      C   => clk,
      Clr => s29,
      Q   => s32);
  gate16: entity work.DIG_D_FF_AS
    port map (
      Set => s33,
      D   => s32,
      C   => clk,
      Clr => s29,
      Q   => s34);
  gate17: entity work.DIG_D_FF_AS
    port map (
      Set => s35,
      D   => s34,
      C   => clk,
      Clr => s29,
      Q   => s36);
  gate18: entity work.DIG_D_FF_AS
    port map (
      Set => s37,
      D   => s36,
      C   => clk,
      Clr => s29,
      Q   => s38);
  gate19: entity work.DIG_D_FF_AS
    port map (
      Set => s39,
      D   => s38,
      C   => clk,
      Clr => s29,
      Q   => s40);
  gate20: entity work.DIG_D_FF_AS
    port map (
      Set => s41,
      D   => s40,
      C   => clk,
      Clr => s29,
      Q   => s42);
  gate21: entity work.DIG_D_FF_AS
    port map (
      Set => s43,
      D   => s42,
      C   => clk,
      Clr => s29,
      Q   => s44);
  gate22: entity work.DIG_D_FF_AS
    port map (
      Set => s45,
      D   => s44,
      C   => clk,
      Clr => s29,
      Q   => s46);
  gate23: entity work.DIG_D_FF_AS
    port map (
      Set => s47,
      D   => s46,
      C   => clk,
      Clr => s29,
      Q   => s48);
  gate24: entity work.DIG_D_FF_AS
    port map (
      Set => s49,
      D   => s48,
      C   => clk,
      Clr => s29,
      Q   => s50);
  gate25: entity work.DIG_D_FF_AS
    port map (
      Set => s51,
      D   => s50,
      C   => clk,
      Clr => s29,
      Q   => s52);
  gate26: entity work.DIG_D_FF_AS
    port map (
      Set => s53,
      D   => s52,
      C   => clk,
      Clr => s29,
      Q   => s54);
  gate27: entity work.DIG_D_FF_AS
    port map (
      Set => s55,
      D   => s54,
      C   => clk,
      Clr => s29,
      Q   => s56);
  gate28: entity work.DIG_D_FF_AS
    port map (
      Set => s57,
      D   => s56,
      C   => clk,
      Clr => s29,
      Q   => ld);
  gate29: entity work.DIG_D_FF_AS
    port map (
      Set => s58,
      D   => ld,
      C   => clk,
      Clr => s29,
      Q   => s59);
  gate30: entity work.DIG_D_FF_AS
    port map (
      Set => s60,
      D   => s59,
      C   => clk,
      Clr => s29,
      Q   => st);
                 s31           <= (s42 xor (s52 xor (s56 xor s59)));
                 RandomNUM(0)  <= s32;
                 RandomNUM(1)  <= s34;
                 RandomNUM(2)  <= s36;
                 RandomNUM(3)  <= s38;
                 RandomNUM(4)  <= s40;
                 RandomNUM(5)  <= s42;
                 RandomNUM(6)  <= s44;
                 RandomNUM(7)  <= s46;
                 RandomNUM(8)  <= s48;
                 RandomNUM(9)  <= s50;
                 RandomNUM(10) <= s52;
                 RandomNUM(11) <= s54;
                 RandomNUM(12) <= s56;
                 RandomNUM(13) <= ld;
                 RandomNUM(14) <= s59;
                 RandomNUM(15) <= st;
                 uo_out        <= RandomNUM(7 downto 0);
                 s28           <= (s23 or s22);
  gate31: entity work.DIG_JK_FF
    generic map (
      tempval => '0')
    port map (
      J => s28,
      C => clk,
      K => s28,
      Q => s22);
end architecture;
