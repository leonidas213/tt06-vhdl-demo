-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

library ieee;
  use ieee.std_logic_1164.all;

  use ieee.numeric_std.all;

entity COMP_GATE_UNSIGNED is
  generic (Bits : integer);
  port (
    gr : out std_logic;
    eq : out std_logic;
    le : out std_logic;
    a  : in  std_logic_vector((Bits - 1) downto 0);
    b  : in  std_logic_vector((Bits - 1) downto 0));
end entity;

architecture Behavioral of COMP_GATE_UNSIGNED is
begin
  process (a, b)
  begin
    if (unsigned(a) > unsigned(b)) then
      le <= '0';
      eq <= '0';
      gr <= '1';
    elsif (unsigned(a) < unsigned(b)) then
      le <= '1';
      eq <= '0';
      gr <= '0';
    else
      le <= '0';
      eq <= '1';
      gr <= '0';
    end if;
  end process;
end architecture;

library ieee;
  use ieee.std_logic_1164.all;

entity DIG_Register_BUS is
  generic (Bits : integer);
  port (
    Q  : out std_logic_vector((Bits - 1) downto 0);
    D  : in  std_logic_vector((Bits - 1) downto 0);
    C  : in  std_logic;
    en : in  std_logic);
end entity;

architecture Behavioral of DIG_Register_BUS is
  signal state : std_logic_vector((Bits - 1) downto 0) := (others => '0');
begin
  Q <= state;

  process (C)
  begin
    if rising_edge(C) and (en = '1') then
      state <= D;
    end if;
  end process;
end architecture;

library ieee;
  use ieee.std_logic_1164.all;

entity MUX_GATE_BUS_1 is
  generic (Bits : integer);
  port (
    p_out : out std_logic_vector((Bits - 1) downto 0);
    sel   : in  std_logic;

    in_0  : in  std_logic_vector((Bits - 1) downto 0);
    in_1  : in  std_logic_vector((Bits - 1) downto 0));
end entity;

architecture Behavioral of MUX_GATE_BUS_1 is
begin
  with sel select
    p_out <=                       in_0 when '0',
                                   in_1 when '1',
                   (others => '0') when others;
end architecture;

library ieee;
  use ieee.std_logic_1164.all;

entity DIG_D_FF_AS is

  port (
    Q    : out std_logic;
    notQ : out std_logic;
    Set  : in  std_logic;
    D    : in  std_logic;
    C    : in  std_logic;
    Clr  : in  std_logic);
end entity;

architecture Behavioral of DIG_D_FF_AS is
  signal state : std_logic := '0';
begin
  process (Set, Clr, C)
  begin
    if (Set = '1') then
      state <= not ('0');
    elsif (Clr = '1') then
      state <= '0';
    elsif rising_edge(C) then
      state <= D;
    end if;
  end process;

  Q    <= state;
  notQ <= not (state);
end architecture;

library ieee;
  use ieee.std_logic_1164.all;

entity DIG_JK_FF is
  generic (tempval std_logic);
  port (
    Q    : out std_logic;
    notQ : out std_logic;
    J    : in  std_logic;
    C    : in  std_logic;
    K    : in  std_logic);
end entity;

architecture Behavioral of DIG_JK_FF is
  signal temp : std_logic := default;
begin
  process (C)
  begin
    if rising_edge(C) then
      if (J = '0' and K = '1') then
        temp <= '0';
      elsif (J = '1' and K = '0') then
        temp <= '1';
      elsif (J = '1' and K = '1') then
        temp <= not (temp);
      end if;
    end if;
  end process;
  Q    <= temp;
  notQ <= not (temp);
end architecture;

library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

entity tt_um_smallcpu is
  port (
    clk     : in  std_logic;
    rst_n   : in  std_logic;
    ena     : in  std_logic;
    uio_in  : in  std_logic_vector(7 downto 0);
    ui_in   : in  std_logic_vector(7 downto 0);
    uo_out  : out std_logic_vector(7 downto 0);
    uio_out : out std_logic_vector(7 downto 0);
    uio_oe  : out std_logic_vector(7 downto 0));
end entity;

architecture Behavioral of tt_um_smallcpu is
  signal s0                    : std_logic_vector(15 downto 0);
  signal s1                    : std_logic;
  signal ioW                   : std_logic;
  signal s2                    : std_logic;
  signal s3                    : std_logic_vector(3 downto 0);
  signal outputToOutside       : std_logic_vector(3 downto 0);
  signal s4                    : std_logic;
  signal s5                    : std_logic;
  signal s6                    : std_logic;
  signal s7                    : std_logic;
  signal s8                    : std_logic;
  signal s9                    : std_logic;
  signal s10                   : std_logic;
  signal s11                   : std_logic;
  signal Din                   : std_logic_vector(15 downto 0);
  signal s12                   : std_logic_vector(7 downto 0);
  signal s13                   : std_logic_vector(7 downto 0);
  signal s14                   : std_logic;
  signal inter                 : std_logic;
  signal s15                   : std_logic_vector(7 downto 0);
  signal s16                   : std_logic;
  signal s17                   : std_logic;
  signal InterLock             : std_logic;
  signal s18                   : std_logic;
  signal s19                   : std_logic;
  signal s20                   : std_logic;
  signal s21                   : std_logic;
  signal s22                   : std_logic;
  signal s23                   : std_logic_vector(15 downto 0);
  signal s24                   : std_logic_vector(15 downto 0);
  signal s25                   : std_logic;
  signal s26                   : std_logic;
  signal s27                   : std_logic;
  signal s28                   : std_logic;
  signal s29                   : std_logic;
  signal s30                   : std_logic;
  signal s31                   : std_logic;
  signal s32                   : std_logic;
  signal s33                   : std_logic;
  signal s34                   : std_logic;
  signal s35                   : std_logic;
  signal s36                   : std_logic;
  signal s37                   : std_logic;
  signal s38                   : std_logic;
  signal s39                   : std_logic;
  signal s40                   : std_logic;
  signal s41                   : std_logic;
  signal s42                   : std_logic;
  signal s43                   : std_logic;
  signal s44                   : std_logic;
  signal s45                   : std_logic;
  signal s46                   : std_logic;
  signal s47                   : std_logic;
  signal s48                   : std_logic;
  signal s49                   : std_logic;
  signal s50                   : std_logic;
  signal s51                   : std_logic;
  signal s52                   : std_logic;
  signal s53                   : std_logic;
  signal s54                   : std_logic;
  signal s55                   : std_logic;
  signal ld                    : std_logic;
  signal s56                   : std_logic;
  signal s57                   : std_logic;
  signal s58                   : std_logic;
  signal st                    : std_logic;
  signal RandomNUM             : std_logic_vector(15 downto 0);
  signal s59                   : std_logic;
  signal s60                   : std_logic;
  signal s61                   : std_logic_vector(3 downto 0);
  signal outputToOutsideEnable : std_logic_vector(3 downto 0);
begin
                s14             <= not clk;
                s0(7 downto 0)  <= ui_in;
                s0(15 downto 8) <= uio_in;
                s4              <= uio_in(0);
                s5              <= uio_in(1);
                s6              <= uio_in(2);
                s7              <= uio_in(3);
                s8              <= uio_in(4);
                s9              <= uio_in(5);
                s10             <= uio_in(6);
                s11             <= uio_in(7);
                InterLock       <= ui_in(0);
                ioW             <= ui_in(1);
  gate0: entity work.COMP_GATE_UNSIGNED
    generic map (
      Bits => 16)
    port map (
      a  => s0,
      b  => "0000000000000101",
      eq => s1);
                Din(0)  <= s4;
                Din(1)  <= s5;
                Din(2)  <= s6;
                Din(3)  <= s7;
                Din(4)  <= s8;
                Din(5)  <= s9;
                Din(6)  <= s10;
                Din(7)  <= s11;
                Din(8)  <= '0';
                Din(9)  <= '0';
                Din(10) <= '0';
                Din(11) <= '0';
                Din(12) <= '0';
                Din(13) <= '0';
                Din(14) <= '0';
                Din(15) <= '0';
                s12(0)  <= s4;
                s12(1)  <= s5;
                s12(2)  <= s6;
                s12(3)  <= s7;
                s12(4)  <= s8;
                s12(5)  <= s9;
                s12(6)  <= s10;
                s12(7)  <= s11;
  gate1: entity work.COMP_GATE_UNSIGNED
    generic map (
      Bits => 16)
    port map (
      a  => s0,
      b  => "0000000000001000",
      eq => s25);
  gate2: entity work.COMP_GATE_UNSIGNED
    generic map (
      Bits => 16)
    port map (
      a  => s0,
      b  => "0000000000000110",
      eq => s59);
                s3  <= s0(3 downto 0);
                s61 <= s0(3 downto 0);
                s2  <= (s1 and ioW);
                s22 <= (s25 and ioW);
                s60 <= (s59 and ioW);
  gate3: entity work.DIG_Register_BUS
    generic map (
      Bits => 4)
    port map (
      D  => s3,
      C  => clk,
      en => s2,
      Q  => outputToOutside);
  gate4: entity work.DIG_Register_BUS -- seed
  generic map (
    Bits => 16) port map (
    D  => s0,
    C  => clk,
    en => s22,
    Q  => s23);
                s19 <= (clk and s22);
  gate5: entity work.DIG_Register_BUS
    generic map (
      Bits => 4)
    port map (
      D  => s61,
      C  => clk,
      en => s60,
      Q  => outputToOutsideEnable);
  gate6: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 16)
    port map (
      sel   => s22,
      in_0  => "0000000000000000",
      in_1  => s23,
      p_out => s24);
                uio_out(3 downto 0) <= "0000";
                uio_out(7 downto 4) <= outputToOutside;
                uio_oe(3 downto 0)  <= "0000";
                uio_oe(7 downto 4)  <= outputToOutsideEnable;
                s28                 <= s24(0);
                s31                 <= s24(1);
                s33                 <= s24(2);
                s35                 <= s24(3);
                s37                 <= s24(4);
                s39                 <= s24(5);
                s41                 <= s24(6);
                s43                 <= s24(7);
                s45                 <= s24(8);
                s47                 <= s24(9);
                s49                 <= s24(10);
                s51                 <= s24(11);
                s53                 <= s24(12);
                s55                 <= s24(13);
                s56                 <= s24(14);
                s58                 <= s24(15);
  gate7: entity work.DIG_Register_BUS
    generic map (
      Bits => 8)
    port map (
      D  => s13,
      C  => s14,
      en => inter,
      Q  => s15);
  gate8: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 8)
    port map (
      sel   => InterLock,
      in_0  => s12,
      in_1  => s15,
      p_out => s13);
  gate9: entity work.DIG_D_FF_AS
    port map (
      Set  => '0',
      D    => s18,
      C    => s19,
      Clr  => s20,
      Q    => s21,
      notQ => s18);
                 s27 <= (s22 and not s26);
  gate10: entity work.DIG_D_FF_AS
      port map (
      Set => s28,
      D   => s29,
      C   => clk,
      Clr => s27,
      Q   => s30);
  gate11: entity work.DIG_D_FF_AS
    port map (
      Set => s31,
      D   => s30,
      C   => clk,
      Clr => s27,
      Q   => s32);
  gate12: entity work.DIG_D_FF_AS
    port map (
      Set => s33,
      D   => s32,
      C   => clk,
      Clr => s27,
      Q   => s34);
  gate13: entity work.DIG_D_FF_AS
    port map (
      Set => s35,
      D   => s34,
      C   => clk,
      Clr => s27,
      Q   => s36);
  gate14: entity work.DIG_D_FF_AS
    port map (
      Set => s37,
      D   => s36,
      C   => clk,
      Clr => s27,
      Q   => s38);
  gate15: entity work.DIG_D_FF_AS
    port map (
      Set => s39,
      D   => s38,
      C   => clk,
      Clr => s27,
      Q   => s40);
  gate16: entity work.DIG_D_FF_AS
    port map (
      Set => s41,
      D   => s40,
      C   => clk,
      Clr => s27,
      Q   => s42);
  gate17: entity work.DIG_D_FF_AS
    port map (
      Set => s43,
      D   => s42,
      C   => clk,
      Clr => s27,
      Q   => s44);
  gate18: entity work.DIG_D_FF_AS
    port map (
      Set => s45,
      D   => s44,
      C   => clk,
      Clr => s27,
      Q   => s46);
  gate19: entity work.DIG_D_FF_AS
    port map (
      Set => s47,
      D   => s46,
      C   => clk,
      Clr => s27,
      Q   => s48);
  gate20: entity work.DIG_D_FF_AS
    port map (
      Set => s49,
      D   => s48,
      C   => clk,
      Clr => s27,
      Q   => s50);
  gate21: entity work.DIG_D_FF_AS
    port map (
      Set => s51,
      D   => s50,
      C   => clk,
      Clr => s27,
      Q   => s52);
  gate22: entity work.DIG_D_FF_AS
    port map (
      Set => s53,
      D   => s52,
      C   => clk,
      Clr => s27,
      Q   => s54);
  gate23: entity work.DIG_D_FF_AS
    port map (
      Set => s55,
      D   => s54,
      C   => clk,
      Clr => s27,
      Q   => ld);
  gate24: entity work.DIG_D_FF_AS
    port map (
      Set => s56,
      D   => ld,
      C   => clk,
      Clr => s27,
      Q   => s57);
  gate25: entity work.DIG_D_FF_AS
    port map (
      Set => s58,
      D   => s57,
      C   => clk,
      Clr => s27,
      Q   => st);
  gate26: entity work.COMP_GATE_UNSIGNED
    generic map (
      Bits => 8)
    port map (
      a  => s13,
      b  => s15,
      gr => s16,
      le => s17);
                 s29           <= (s40 xor (s50 xor (s54 xor s57)));
                 RandomNUM(0)  <= s30;
                 RandomNUM(1)  <= s32;
                 RandomNUM(2)  <= s34;
                 RandomNUM(3)  <= s36;
                 RandomNUM(4)  <= s38;
                 RandomNUM(5)  <= s40;
                 RandomNUM(6)  <= s42;
                 RandomNUM(7)  <= s44;
                 RandomNUM(8)  <= s46;
                 RandomNUM(9)  <= s48;
                 RandomNUM(10) <= s50;
                 RandomNUM(11) <= s52;
                 RandomNUM(12) <= s54;
                 RandomNUM(13) <= ld;
                 RandomNUM(14) <= s57;
                 RandomNUM(15) <= st;
                 inter         <= (s16 or s17);
                 uo_out        <= RandomNUM(7 downto 0);
                 s26           <= (s21 or s20);
  gate27: entity work.DIG_JK_FF
    generic map (
      default => '0')
    port map (
      J => s26,
      C => clk,
      K => s26,
      Q => s20);
end architecture;
